package com.lydia.meet_me;

import android.app.AlertDialog;
import android.app.Fragment;
import android.content.Context;
import android.content.DialogInterface;
import android.content.Intent;
import android.location.Address;
import android.location.Criteria;
import android.location.Geocoder;
import android.os.Bundle;
import android.support.v4.app.FragmentActivity;
import android.support.v7.app.AppCompatActivity;
import android.util.Log;
import android.view.LayoutInflater;
import android.view.Menu;
import android.view.MenuItem;
import android.view.View;
import android.view.ViewGroup;
import android.widget.Button;
import android.widget.EditText;
import android.location.Location;
import android.location.LocationManager;
import android.widget.SeekBar;
import android.widget.TextView;

import com.google.android.gms.common.ConnectionResult;
import com.google.android.gms.common.api.GoogleApiClient;
import com.google.android.gms.location.LocationListener;
import com.google.android.gms.location.LocationRequest;
import com.google.android.gms.location.LocationServices;
import com.google.android.gms.maps.CameraUpdate;
import com.google.android.gms.maps.CameraUpdateFactory;
import com.google.android.gms.maps.GoogleMap;
import com.google.android.gms.maps.OnMapReadyCallback;
import com.google.android.gms.maps.OnStreetViewPanoramaReadyCallback;
import com.google.android.gms.maps.StreetViewPanorama;
import com.google.android.gms.maps.StreetViewPanoramaFragment;
import com.google.android.gms.maps.StreetViewPanoramaOptions;
import com.google.android.gms.maps.StreetViewPanoramaView;
import com.google.android.gms.maps.SupportMapFragment;
import com.google.android.gms.maps.SupportStreetViewPanoramaFragment;
import com.google.android.gms.maps.model.CameraPosition;
import com.google.android.gms.maps.model.IndoorBuilding;
import com.google.android.gms.maps.model.LatLng;
import com.google.android.gms.maps.model.MarkerOptions;
import com.google.android.gms.maps.model.StreetViewPanoramaCamera;

import java.io.IOException;
import java.security.PrivateKey;
import java.util.List;

public class StreetViewActivity extends FragmentActivity implements OnMapReadyCallback , GoogleApiClient.ConnectionCallbacks, GoogleApiClient.OnConnectionFailedListener, GoogleMap.OnIndoorStateChangeListener,
        GoogleMap.OnMapLongClickListener,
        SeekBar.OnSeekBarChangeListener {
    private GoogleMap mMap;
    private GoogleApiClient mGoogleApiClient;
    private LocationRequest mLocationRequest;
    protected TextView mLatitudeText;
    protected TextView mLongitudeText;
    private String friend_location;
    private String message = null;
    protected Button button;
   // private StreetViewPanorama mPanorama;
    private float mBearing;
    private float mTilt;
    private float mZoom;
    private LatLng mCurrentLocation;
    private IndoorBuilding mIndoorBuilding;
    private SeekBar mIndoorSelector;
    private TextView mIndoorMinLevel;
    private TextView mIndoorMaxLevel;

    private StreetViewPanoramaView mStreetViewPanoramaView;
    private StreetViewPanorama mPanorama;

    private static final String EXTRA_LONG = "current_long";
    private static final String EXTRA_LAT = "current_lat";
    private static final String EXTRA_BEARING = "current_bearing";
    private static final String EXTRA_TILT = "current_tilt";
    private static final String EXTRA_ZOOM = "current_zoom";

    public static final String TAG = MapsActivity.class.getSimpleName();
    public final static String EXTRA_MESSAGE = "com.lydia.meet_me.MESSAGE";
    public final static String EXTRA_MESSAGE1 = "com.lydia.meet_me.MESSAGE1";

    @Override
    public void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_street_view);

        mGoogleApiClient = new GoogleApiClient.Builder(this)
                .addConnectionCallbacks(this)
                .addOnConnectionFailedListener(this)
                .addApi(LocationServices.API)
                .build();

       // setUpMapIfNeeded();
    }

    private void setUpMap(){

        mMap.setMyLocationEnabled(true);
        mGoogleApiClient.connect();
    }

    private void showStreetView( LatLng latLng ) {
        if( mPanorama == null )
            return;

        StreetViewPanoramaCamera.Builder builder = new StreetViewPanoramaCamera.Builder( mPanorama.getPanoramaCamera() );
        builder.tilt( 0.0f );
        builder.zoom(0.0f);
        builder.bearing(0.0f);
        mPanorama.animateTo(builder.build(), 0);

        mPanorama.setPosition(latLng, 300);
        mPanorama.setStreetNamesEnabled(true);
    }

    private void initStreetView() {
        mMap.setOnMapLongClickListener(this);

        mStreetViewPanoramaView.getStreetViewPanoramaAsync(new OnStreetViewPanoramaReadyCallback() {
            @Override
            public void onStreetViewPanoramaReady(StreetViewPanorama panorama) {
                showStreetView(new LatLng(53.3478, 6.2597));
            }
               /** mPanorama = panorama;
                Intent intent = getIntent();
                double x = intent.getDoubleExtra("EXTRA_MESSAGE", 0.00);
                double y = intent.getDoubleExtra("EXTRA_MESSAGE1", 0.00);
                showStreetView(new LatLng (x, y));
            }*/
        });

    }

    private void initCamera() {
        CameraPosition position = CameraPosition.builder()
                .target( new LatLng( 40.7506, -73.9936 ) )
                .zoom( 18f )
                .bearing( 0.0f )
                .tilt( 0.0f )
                .build();

        mMap.animateCamera(CameraUpdateFactory.newCameraPosition(position), null);
        mMap.setMapType(GoogleMap.MAP_TYPE_HYBRID);
    }




    @Override
    public void onMapReady(GoogleMap googleMap) {

    }
/**
    private void initStreetView( ) {

        Intent intent = this.getIntent();
       // Bundle extras = intent.getExtras();
        double x = intent.getDoubleExtra("EXTRA_MESSAGE", 39.56);
       // double y = Double.parseDouble(x);
        double y = intent.getDoubleExtra("EXTRA_MESSAGE1", 116.24);
       // double z = Double.parseDouble(s);
        LatLng mCurrentLocation = new LatLng(x, y);

        StreetViewPanoramaFragment fragment = ( (StreetViewPanoramaFragment) getFragmentManager().findFragmentById( R.id.street_view_panorama_fragment ) );
        if( mPanorama == null ) {
            if( fragment != null ) {
                mPanorama = fragment.getStreetViewPanorama();
                if( mPanorama != null) {
                    StreetViewPanoramaCamera.Builder builder = new StreetViewPanoramaCamera.Builder( mPanorama.getPanoramaCamera() );
                    if( mBearing != builder.bearing )
                        builder.bearing = mBearing;
                    if( mTilt != builder.tilt )
                        builder.tilt = mTilt;
                    if( mZoom != builder.zoom )
                        builder.zoom = mZoom;
                    mPanorama.animateTo(builder.build(), 0);
                    mPanorama.setPosition( mCurrentLocation, 300 );
                    mPanorama.setStreetNamesEnabled( true );
                }
            }
 }
 }
 */
private void initMapIndoorSelector() {
    mIndoorSelector.setOnSeekBarChangeListener( this );

    mMap.getUiSettings().setIndoorLevelPickerEnabled(false);
    mMap.setOnIndoorStateChangeListener(this);
}

    private void hideFloorLevelSelector() {
        mIndoorSelector.setVisibility( View.GONE );
        mIndoorMaxLevel.setVisibility(View.GONE);
        mIndoorMinLevel.setVisibility(View.GONE);
    }

    private void showFloorLevelSelector() {
        if( mIndoorBuilding == null )
            return;

        int numOfLevels = mIndoorBuilding.getLevels().size();

        mIndoorSelector.setMax( numOfLevels - 1 );

        //Bottom floor is the last item in the list, top floor is the first
        mIndoorMaxLevel.setText( mIndoorBuilding.getLevels().get( 0 ).getShortName() );
        mIndoorMinLevel.setText( mIndoorBuilding.getLevels().get( numOfLevels - 1 ).getShortName() );

        mIndoorSelector.setProgress( mIndoorBuilding.getActiveLevelIndex() );

        mIndoorSelector.setVisibility( View.VISIBLE );
        mIndoorMaxLevel.setVisibility( View.VISIBLE );
        mIndoorMinLevel.setVisibility( View.VISIBLE );

    }

    @Override
    public void onIndoorBuildingFocused() {
        mIndoorBuilding = mMap.getFocusedBuilding();

        if( mIndoorBuilding == null || mIndoorBuilding.getLevels() == null || mIndoorBuilding.getLevels().size() <= 1 ) {
            hideFloorLevelSelector();
        } else {
            showFloorLevelSelector();
        }

    }

    @Override
    public void onIndoorLevelActivated(IndoorBuilding indoorBuilding) {
        if( indoorBuilding == null )
            return;


    }

    @Override
    public void onProgressChanged(SeekBar seekBar, int progress, boolean b) {
        if( mIndoorBuilding == null || seekBar.getVisibility() == View.GONE  )
            return;

        int numOfLevels = mIndoorBuilding.getLevels().size();
        mIndoorBuilding.getLevels().get( numOfLevels - 1 - progress ).activate();
    }

    @Override
    public void onStartTrackingTouch(SeekBar seekBar) {

    }

    @Override
    public void onStopTrackingTouch(SeekBar seekBar) {

    }

    @Override
    public void onMapLongClick(LatLng latLng) {
        showStreetView(latLng);
    }

    @Override
    public void onConnected(Bundle bundle) {
            initStreetView();
            initCamera();
    }

    @Override
    public void onConnectionSuspended(int i) {

    }

    @Override
    public void onConnectionFailed(ConnectionResult connectionResult) {

    }
}
